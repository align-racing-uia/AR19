


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void CheckShutdownStatus() {
using namespace shutdowncircuit;
  sensorValue = analogRead(shutdownPin);

  if(sensorValue < global::threshold)
  {
    cansignal::shutdownActive = global::sant;
  }
  else
  {
    cansignal::shutdownActive = global::tull;
  }
    
 
} 


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CheckAirTempAmbient() {
  using namespace ambient;
  airTempSensorValue = analogRead(airTempPin);
  cansignal::ambientAirTemp = = pow(0.000000609953237*airTempSensorValue,3) - pow(0.000948348811134*airTempSensorValue,2) + 0.556676559395865*airTempSensorValue - 98.2809853303643; //Sj책 dokumentasjon for transfer funksjon //her m책 inn transfer funksjon
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void CheckAirTempTurbo() {
  using namespace turbo;
  airTempSensorValue = analogRead(airTempPin);
  //Her p책 sensorvalue gjerast 
  cansignal::turboDischargeAirTemp = pow(0.000000609953237*airTempSensorValue,3) - pow(0.000948348811134*airTempSensorValue,2) + 0.556676559395865*airTempSensorValue - 98.2809853303643; //Sj책 dokumentasjon for transfer funksjon
}
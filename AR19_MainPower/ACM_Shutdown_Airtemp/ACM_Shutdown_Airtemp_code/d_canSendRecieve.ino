void CanSetup() // Sets up the CAN-Bus protocol.  
{
  SPI.begin();
  mcp2515.reset();
  mcp2515.setBitrate(CAN_1000KBPS);
  mcp2515.setNormalMode();

// CAN message 0x15 - ACM OK Signal

  myMessage.can_id = 0x15;  
  myMessage.can_dlc = 1; 
  myMessage.data[0] = 21;


  mcp2515.sendMessage(&myMessage);

}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void CanRecieve() {

using namespace cansignal;
//Ta imot data

 if (mcp2515.readMessage(&myMessage) == MCP2515::ERROR_OK) {
  
    myMessage.can_id = 0x410; 
    myMessage.can_dlc = 1; 
    myMessage.data[0] = helloImHereStartupPedal; 
    if (helloImHereStartupPedal == global::sant)
    {
      bitWrite(acmOk,1)
    }
    else
    {
       bitWrite(acmOk,0)
    }
    
  }


// Her skal den ta i mot ACM_OK signal fra alle ACM'er
/*
 if (mcp2515.readMessage(&myMessage) == MCP2515::ERROR_OK) {
  
    myMessage.can_id = 0x410;  // ID'en til meldingen som er mottat
    myMessage.can_dlc = 3; // Antal byte med data i meldingen 1 til 8
    myMessage.data[0] = breakPressure1; // Det f√∏rste bytet med data
  }

*/

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void CanSend() {      // Sende data
using namespace cansignal;

// CAN message 0x14 - pingAllACM

if (pingAllACM == global::sant)
{
  myMessage.can_id = 0x14;  
  myMessage.can_dlc = 1; 
  myMessage.data[0] = pingAllACM;

  mcp2515.sendMessage(&myMessage);


  pingAllACM == global::tull;
}


// CAN message 0x270 - Shutdown Active
  myMessage.can_id = 0x270;  
  myMessage.can_dlc = 1; 
  myMessage.data[0] = shutdownActive;

  mcp2515.sendMessage(&myMessage);



// CAN message 0x630 - Ambient and turbo air temp
  myMessage.can_id = 0x630;  
  myMessage.can_dlc = 2; 
  myMessage.data[0] = ambientAirTemp;
  myMessage.data[1] = turboDischargeAirTemp;

  mcp2515.sendMessage(&myMessage);


}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
